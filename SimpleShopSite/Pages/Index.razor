@page "/"
@using SexyWebSite.Data

@inject IWebHostEnvironment Environment
@inject NavigationManager NavManager
@inject UserManager<ApplicationUser> UserManager
@inject ImageCreator ImgCreate
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@inject IWebHostEnvironment Environment

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<hr />

<div class="row product-disp">
    @if (PrductsDisp.Any())
    {
        @foreach (var item in PrductsDisp)
        {
            <a class="col-auto product-disp card g-0" @key="item" href="@($"/productdisp/{item.Product.UserOwner.UserName}/{item.Product.ProductId}")" style="text-decoration: none;" >
                <img src="@item.ImageUrl" class="disp-image unselectable nodrag card-img-top product-disp"/>
                <div class="nodrag card-body">
                    <h3 style="margin:0;color:black; text-decoration: none!important;" class="unselectable">@item.Product.Name</h3>
                    <label class="disp-by unselectable">by @item.Product.UserOwner.UserName</label>
                </div>   
            </a>  
        }

    }
    else
    {
        <h2>Loading...</h2>
    }
</div>

@code {
    private List<Product> SelectedProducts = new();
    private List<ProductDisplay> PrductsDisp = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SelectedProducts = await UserManager.Users
                .OrderBy(_ => Guid.NewGuid())
                .Take(20)
                .Include(x => x.Products)
                .SelectMany(x => x.Products)
                .Include(x => x.UserOwner)// fix bugs
                .Include(x => x.Images) // fix bugs
                .ToListAsync();

            SelectedProducts = SelectedProducts
                .Distinct() // fix bugs
                .OrderBy(_ => Guid.NewGuid())
                .ToList();// fix bugs

            foreach (var item in SelectedProducts)
            {
                var disp = await ProductDisplay.CreateDisplayAsync(item,ImgCreate);
                PrductsDisp.Add(disp);
            }
            StateHasChanged();
        }
    }

    public async ValueTask DisposeAsync()
    {
        foreach (var item in PrductsDisp)
        {
            await item.DisposeAsync();
        }
        await ImgCreate.DisposeAsync();
    }
}